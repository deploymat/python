version: '3.8'

# Custom networks for better isolation
networks:
  ${NETWORK_NAME:-caddy_network}:
    driver: ${NETWORK_DRIVER:-bridge}
  app_network:
    driver: ${NETWORK_DRIVER:-bridge}

# Volumes for persistent data
volumes:
  caddy_data:
    name: caddy_data
  caddy_config:
    name: caddy_config

# Environment variables from .env file
x-env: &env_vars
  - DOMAIN
  - STAGING
  - EMAIL
  - CF_API_TOKEN
  - LOG_LEVEL
  - DEV_MODE
  - DISABLE_HTTPS
  - ENABLE_ACCESS_LOGS
  - BASIC_AUTH_USER
  - BASIC_AUTH_HASH
  - ALLOWED_IPS

services:
  # Caddy Reverse Proxy with Docker Integration
  caddy:
    image: ${CADDY_IMAGE:-lucaslorentz/caddy-docker-proxy:latest}
    container_name: caddy
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
      - "${HTTPS_PORT:-443}:443/udp"
    environment:
      - CADDY_INGRESS_NETWORKS=${NETWORK_NAME:-caddy_network}
      - CADDY_DOCKER_CADDYFILE_PATH=/etc/caddy/Caddyfile
      - CADDY_DOCKER_PROCESS_CADDYFILE=true
      - CADDY_DOMAIN=${DOMAIN:-lvh.me}
      - CADDY_LOG_LEVEL=${LOG_LEVEL:-info}
      - CADDY_STAGING=${STAGING:-false}
      - CF_API_EMAIL=${EMAIL:-}
      - CF_API_KEY=${CF_API_TOKEN:-}
      - DISABLE_HTTPS=${DISABLE_HTTPS:-false}
      - DEV_MODE=${DEV_MODE:-false}
    env_file: .env
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - ./certs:/etc/caddy/certs:ro
      - caddy_data:/data
      - caddy_config:/config
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - ${NETWORK_NAME:-caddy_network}
      - app_network
    deploy:
      resources:
        limits:
          cpus: '${CADDY_CPUS:-1}'
          memory: ${CADDY_MEMORY:-512M}
    healthcheck:
      test: ["CMD", "caddy", "validate", "--config", "/etc/caddy/Caddyfile"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Example API Service
  api:
    image: nginx:alpine
    container_name: api_service
    restart: unless-stopped
    ports:
      - "${API_PORT:-8080}:80"
    labels:
      - caddy=${API_SUBDOMAIN:-api}.${DOMAIN:-lvh.me}
      - caddy.reverse_proxy={{upstreams ${API_PORT:-8080}}}
      - caddy.tls internal
      - caddy.log {"output": "file ${LOG_LEVEL:-info} /var/log/caddy/access.log {size 10 age 14 rotate 1}"}
    networks:
      - app_network
    depends_on:
      caddy:
        condition: service_healthy

  # Example Web Application
  web:
    image: nginx:alpine
    container_name: web_app
    restart: unless-stopped
    ports:
      - "${WEB_PORT:-8081}:80"
    labels:
      - caddy=${WEB_SUBDOMAIN:-app}.${DOMAIN:-lvh.me}
      - caddy.reverse_proxy={{upstreams ${WEB_PORT:-8081}}}
      - caddy.tls internal
      - caddy.log {"output": "file ${LOG_LEVEL:-info} /var/log/caddy/access.log {size 10 age 14 rotate 1}"}
    networks:
      - app_network
    depends_on:
      caddy:
        condition: service_healthy

  # Example Auth Service
  auth:
    image: nginx:alpine
    container_name: auth_service
    restart: unless-stopped
    ports:
      - "${AUTH_PORT:-8082}:80"
    labels:
      - caddy=${AUTH_SUBDOMAIN:-auth}.${DOMAIN:-lvh.me}
      - caddy.reverse_proxy={{upstreams ${AUTH_PORT:-8082}}}
      - caddy.tls internal
      - caddy.log {"output": "file ${LOG_LEVEL:-info} /var/log/caddy/access.log {size 10 age 14 rotate 1}"}
    networks:
      - app_network
    depends_on:
      caddy:
        condition: service_healthy
    labels:
      - caddy=${AUTH_SUBDOMAIN}.${DOMAIN}
      - caddy.reverse_proxy={{upstreams 80}}
    networks:
      - app-network

volumes:
  caddy_data:
  caddy_config:
